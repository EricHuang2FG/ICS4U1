import java.io.*;

public class List {

    private Node head;

    class Node {

        int info;
        Node link;

        Node(int info, Node link) {
            this.info = info;
            this.link = link;
        }
    }

    public void addAtFront(int item) {
        head = new Node(item, head);
    }

    public void addAtRear(int item) {
        if (head == null) {
            head = new Node(item, null);
        } else {
            for (Node temp = head; temp != null; temp = temp.link) {
                if (temp.link == null) {
                    temp.link = new Node(item, null);
                    break;
                }
            }
        }
    }

    public void deleteFirst() {
        if (head == null) {
            System.out.println("Empty list.");
        } else {
            head = head.link;
        }
    }

    public void deleteLast() {
        if (head == null) {
            System.out.println("Empty list.");
        } else if (head.link == null) {
            head = null;
        } else {
            for (Node temp = head; temp != null; temp = temp.link) {
                if (temp.link.link == null) {
                    temp.link = null;
                    break;
                }
            }
        }
    }

    public void delete(int item) {
        if (head == null) {
            System.out.println("Empty list.");
        } else {
            Node previous = null;
            for (Node current = head; current != null; current = current.link) {
                if (current.info == item) {
                    if (current == head) {
                        head = head.link;
                        break;
                    } else {
                        previous.link = current.link;
                        break;
                    }
                }
            }
            previous = current;
        }
    }

    public void insert(int item) {
        if (head == null) {
            head = new Node(item, null);
        } else {
            Node previous = null;
            for (Node current = head; current != null; current = current.link) {
                if (current.link == null && item >= current.info) {
                    current.link = new Node(item, null);
                    break;
                } else if (item < current.info) {
                    if (current == head) {
                        head = new Node(item, head);
                        break;
                    } else {
                        previous.link = new Node(item, current);
                        break;
                    }
                }
                previous = current;
            }
        }
    }

}

public class Queue {

    private Node front;
    private Node rear;

    class Node {

        int info;
        Node link;

        Node(int info, Node link) {
            this.info = info;
            this.link = link;
        }

    }

    public void enqueue(int item) {
        if (front == null && rear == null) {
            Node newNode = new Node(item, null);
            front = newNode;
            rear = newNode;
        } else {
            Node newNode = new Node(item, null);
            rear.link = newNode;
            rear = newNode;
        }
    }

    public int dequeue() {
        if (front == null && rear == null) {
            System.out.println("Empty queue");
            return 0;
        } else if (front == rear) {
            int value = front.info;
            front = null;
            rear = null;
            return value;
        } else {
            int value = front.info;
            front = front.link;
            return value;
        }
    }

    public int peek() {
        if (front == null && rear == null) {
            System.out.println("Empty queue");
            return 0;
        } else {
            return front.info;
        }
    }

}

public class Stack {

    private Node top;

    class Node {

        int info;
        Node link;

        Node(int info, Node link) {
            this.info = info;
            this.link = link;
        }

    }

    public void push(int item) {
        top = new Node(item, top);
    }

    public int pop() {
        if (top == null) {
            throw new EmptyStackException();
        } else {
            int value = top.info;
            top = top.link;
            return value;
        }
    }

    public int peek() {
        if (top == null) {
            throw new EmptyStackException();
        } else {
            return top.info;
        }
    }
    
}